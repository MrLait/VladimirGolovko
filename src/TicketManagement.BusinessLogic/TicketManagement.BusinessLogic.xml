<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TicketManagement.BusinessLogic</name>
    </assembly>
    <members>
        <member name="T:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages">
            <summary>
            Exception messages conainer.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.AreaForTheLayoutExist">
            <summary>
            {0} - Description.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.IdIsNegative">
            <summary>
            {0} - Id.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.IdIsZero">
            <summary>
            {0} - Id.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.PriceIsNegative">
            <summary>
            {0} - Price.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.StateIsNegative">
            <summary>
            {0} - State.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.EventDateTimeValidation">
            <summary>
            {0} - DateTime.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.EventForTheSameVenueInTheSameDateTime">
            <summary>
            {0} - Description.
            {1} - DateTime.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.ThereAreNoSeatsInTheEvent">
            <summary>
            {0} - Description.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.LayoutForTheVenueExist">
            <summary>
            {0} - Description.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.SeatForTheAreaExis">
            <summary>
            {0} - Row.
            {1} - Number.
            </summary>
        </member>
        <member name="F:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.VenueExist">
            <summary>
            {0} - Description.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Infrastructure.ExceptionMessages"/> class.
            </summary>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Infrastructure.ValidationException">
            <summary>
            Validation class.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Infrastructure.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Infrastructure.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Infrastructure.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Infrastructure.ValidationException"/> class.
            </summary>
            <param name="message">Validation message.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Infrastructure.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Infrastructure.ValidationException"/> class.
            </summary>
            <param name="message">Validation message.</param>
            <param name="innerException">Inner exceprion.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Infrastructure.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Infrastructure.ValidationException"/> class.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Interfaces.IAreaService">
            <summary>
            Area service interface.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IAreaService.CreateAsync(TicketManagement.Dto.AreaDto)">
            <summary>
            Create object in database.
            </summary>
            <param name="dto">Area data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IAreaService.DeleteAsync(TicketManagement.Dto.AreaDto)">
            <summary>
            Delete object in database.
            </summary>
            <param name="dto">Area data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IAreaService.UpdateAsync(TicketManagement.Dto.AreaDto)">
            <summary>
            Update object in database.
            </summary>
            <param name="dto">Area data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IAreaService.GetByIDAsync(System.Int32)">
            <summary>
            Get object by Id from table in database.
            </summary>
            <param name="id">Object id.</param>
            <returns>Returns object by id.</returns>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IAreaService.GetAllAsync">
            <summary>
            Method to get all objects from database table.
            </summary>
            <returns>Returns list of objects.</returns>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Interfaces.IEventAreaService">
            <summary>
            Event area service interface.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventAreaService.UpdatePriceAsync(TicketManagement.Dto.EventAreaDto)">
            <summary>
            Update price object in database.
            </summary>
            <param name="dto">Event area data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventAreaService.GetByIDAsync(System.Int32)">
            <summary>
            Get object by Id from table in database.
            </summary>
            <param name="id">Object id.</param>
            <returns>Returns object by id.</returns>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventAreaService.GetAllAsync">
            <summary>
            Method to get all objects from database table.
            </summary>
            <returns>Returns list of objects.</returns>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Interfaces.IEventSeatService">
            <summary>
            Event seat service interface.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventSeatService.UpdateStateAsync(TicketManagement.Dto.EventSeatDto)">
            <summary>
            Update state object in database.
            </summary>
            <param name="dto">Event seat data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventSeatService.GetByIDAsync(System.Int32)">
            <summary>
            Get object by Id from table in database.
            </summary>
            <param name="id">Object id.</param>
            <returns>Returns object by id.</returns>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventSeatService.GetAllAsync">
            <summary>
            Method to get all objects from database table.
            </summary>
            <returns>Returns list of objects.</returns>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Interfaces.IEventService">
            <summary>
            Event service interface.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventService.CreateAsync(TicketManagement.Dto.EventDto)">
            <summary>
            Create object in database.
            </summary>
            <param name="dto">Event data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventService.DeleteAsync(TicketManagement.Dto.EventDto)">
            <summary>
            Create object in database.
            </summary>
            <param name="dto">Event data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventService.UpdateAsync(TicketManagement.Dto.EventDto)">
            <summary>
            Create object in database.
            </summary>
            <param name="dto">Event data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventService.UpdateLayoutIdAsync(TicketManagement.Dto.EventDto)">
            <summary>
            Update object in database.
            </summary>
            <param name="dto">Event data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventService.GetByIDAsync(System.Int32)">
            <summary>
            Get object by Id from table in database.
            </summary>
            <param name="id">Object id.</param>
            <returns>Returns object by id.</returns>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IEventService.GetAllAsync">
            <summary>
            Method to get all objects from database table.
            </summary>
            <returns>Returns list of objects.</returns>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Interfaces.ILayoutService">
            <summary>
            Layout service interface.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.ILayoutService.CreateAsync(TicketManagement.Dto.LayoutDto)">
            <summary>
            Create object in database.
            </summary>
            <param name="dto">Layout data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.ILayoutService.DeleteAsync(TicketManagement.Dto.LayoutDto)">
            <summary>
            Delete object in database.
            </summary>
            <param name="dto">Layout data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.ILayoutService.UpdateAsync(TicketManagement.Dto.LayoutDto)">
            <summary>
            Update object in database.
            </summary>
            <param name="dto">Layout data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.ILayoutService.GetByIDAsync(System.Int32)">
            <summary>
            Get object by Id from table in database.
            </summary>
            <param name="id">Object id.</param>
            <returns>Returns object by id.</returns>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.ILayoutService.GetAllAsync">
            <summary>
            Method to get all objects from database table.
            </summary>
            <returns>Returns list of objects.</returns>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Interfaces.ISeatService">
            <summary>
            Seat service interface.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.ISeatService.CreateAsync(TicketManagement.Dto.SeatDto)">
            <summary>
            Create object in database.
            </summary>
            <param name="dto">Seat data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.ISeatService.DeleteAsync(TicketManagement.Dto.SeatDto)">
            <summary>
            Delete object in database.
            </summary>
            <param name="dto">Seat data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.ISeatService.UpdateAsync(TicketManagement.Dto.SeatDto)">
            <summary>
            Update object in database.
            </summary>
            <param name="dto">Seat data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.ISeatService.GetByIDAsync(System.Int32)">
            <summary>
            Get object by Id from table in database.
            </summary>
            <param name="id">Object id.</param>
            <returns>Returns object by id.</returns>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.ISeatService.GetAllAsync">
            <summary>
            Method to get all objects from database table.
            </summary>
            <returns>Returns list of objects.</returns>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Interfaces.IService">
            <summary>
            Service interface with databese context.
            </summary>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Interfaces.IVenueService">
            <summary>
            Venue service interface.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IVenueService.CreateAsync(TicketManagement.Dto.VenueDto)">
            <summary>
            Create object in database.
            </summary>
            <param name="dto">Venue data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IVenueService.DeleteAsync(TicketManagement.Dto.VenueDto)">
            <summary>
            Delete object in database.
            </summary>
            <param name="dto">Venue data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IVenueService.UpdateAsync(TicketManagement.Dto.VenueDto)">
            <summary>
            Update object in database.
            </summary>
            <param name="dto">Venue data object transfer.</param>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IVenueService.GetByIDAsync(System.Int32)">
            <summary>
            Get object by Id from table in database.
            </summary>
            <param name="id">Object id.</param>
            <returns>Returns object by id.</returns>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Interfaces.IVenueService.GetAllAsync">
            <summary>
            Method to get all objects from database table.
            </summary>
            <returns>Returns list of objects.</returns>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Services.AreaService">
            <summary>
            Area service class.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.AreaService.#ctor(TicketManagement.DataAccess.Interfaces.IDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Services.AreaService"/> class.
            </summary>
            <param name="dbContext">Database context.</param>
        </member>
        <member name="P:TicketManagement.BusinessLogic.Services.AreaService.DbContext">
            <summary>
            Gets property database context.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.AreaService.CreateAsync(TicketManagement.Dto.AreaDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.AreaService.DeleteAsync(TicketManagement.Dto.AreaDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.AreaService.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.AreaService.GetByIDAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.AreaService.UpdateAsync(TicketManagement.Dto.AreaDto)">
            <inheritdoc/>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Services.EventAreaService">
            <summary>
            Event area service class.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventAreaService.#ctor(TicketManagement.DataAccess.Interfaces.IDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Services.EventAreaService"/> class.
            </summary>
            <param name="dbContext">Database context.</param>
        </member>
        <member name="P:TicketManagement.BusinessLogic.Services.EventAreaService.DbContext">
            <summary>
            Gets property database context.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventAreaService.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventAreaService.GetByIDAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventAreaService.UpdatePriceAsync(TicketManagement.Dto.EventAreaDto)">
            <inheritdoc/>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Services.EventSeatService">
            <summary>
            Event seat service class.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventSeatService.#ctor(TicketManagement.DataAccess.Interfaces.IDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Services.EventSeatService"/> class.
            </summary>
            <param name="dbContext">Database context.</param>
        </member>
        <member name="P:TicketManagement.BusinessLogic.Services.EventSeatService.DbContext">
            <summary>
            Gets property database context.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventSeatService.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventSeatService.GetByIDAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventSeatService.UpdateStateAsync(TicketManagement.Dto.EventSeatDto)">
            <inheritdoc/>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Services.EventService">
            <summary>
            Event service class.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventService.#ctor(TicketManagement.DataAccess.Interfaces.IDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Services.EventService"/> class.
            </summary>
            <param name="dbContext">Database context.</param>
        </member>
        <member name="P:TicketManagement.BusinessLogic.Services.EventService.DbContext">
            <summary>
            Gets property database context.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventService.CreateAsync(TicketManagement.Dto.EventDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventService.DeleteAsync(TicketManagement.Dto.EventDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventService.UpdateAsync(TicketManagement.Dto.EventDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventService.GetByIDAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.EventService.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Services.LayoutService">
            <summary>
            Layout service class.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.LayoutService.#ctor(TicketManagement.DataAccess.Interfaces.IDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Services.LayoutService"/> class.
            </summary>
            <param name="dbContext">Database context.</param>
        </member>
        <member name="P:TicketManagement.BusinessLogic.Services.LayoutService.DbContext">
            <summary>
            Gets property database context.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.LayoutService.CreateAsync(TicketManagement.Dto.LayoutDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.LayoutService.DeleteAsync(TicketManagement.Dto.LayoutDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.LayoutService.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.LayoutService.GetByIDAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.LayoutService.UpdateAsync(TicketManagement.Dto.LayoutDto)">
            <inheritdoc/>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Services.SeatService">
            <summary>
            Seat service class.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.SeatService.#ctor(TicketManagement.DataAccess.Interfaces.IDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Services.SeatService"/> class.
            </summary>
            <param name="dbContext">Database context.</param>
        </member>
        <member name="P:TicketManagement.BusinessLogic.Services.SeatService.DbContext">
            <summary>
            Gets property database context.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.SeatService.CreateAsync(TicketManagement.Dto.SeatDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.SeatService.DeleteAsync(TicketManagement.Dto.SeatDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.SeatService.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.SeatService.GetByIDAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.SeatService.UpdateAsync(TicketManagement.Dto.SeatDto)">
            <inheritdoc/>
        </member>
        <member name="T:TicketManagement.BusinessLogic.Services.VenueService">
            <summary>
            Venue service class.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.VenueService.#ctor(TicketManagement.DataAccess.Interfaces.IDbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TicketManagement.BusinessLogic.Services.VenueService"/> class.
            </summary>
            <param name="dbContext">Database context.</param>
        </member>
        <member name="P:TicketManagement.BusinessLogic.Services.VenueService.DbContext">
            <summary>
            Gets property database context.
            </summary>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.VenueService.CreateAsync(TicketManagement.Dto.VenueDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.VenueService.DeleteAsync(TicketManagement.Dto.VenueDto)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.VenueService.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.VenueService.GetByIDAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TicketManagement.BusinessLogic.Services.VenueService.UpdateAsync(TicketManagement.Dto.VenueDto)">
            <inheritdoc/>
        </member>
    </members>
</doc>
