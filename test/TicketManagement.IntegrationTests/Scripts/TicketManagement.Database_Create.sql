/*
Deployment script for EventFlow.Database.Test

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;

USE [master];
GO

IF (DB_ID(N'EventFlow.Database.Test)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [EventFlow.Database.Test]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [EventFlow.Database.Test];
END

GO
PRINT N'Creating EventFlow.Database.Test...'
GO
CREATE DATABASE [EventFlow.Database.Test]
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE [EventFlow.Database.Test]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [EventFlow.Database.Test];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE [EventFlow.Database.Test]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE [EventFlow.Database.Test]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE [EventFlow.Database.Test]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE [EventFlow.Database.Test]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'EventFlow.Database.Test')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [EventFlow.Database.Test]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'EventFlow.Database.Test')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [EventFlow.Database.Test]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [EventFlow.Database.Test]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE [EventFlow.Database.Test]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE [EventFlow.Database.Test]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE [EventFlow.Database.Test]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE [EventFlow.Database.Test]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'EventFlow.Database.Test')
    BEGIN
        ALTER DATABASE [EventFlow.Database.Test]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Area]...';


GO
CREATE TABLE [dbo].[Area] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [LayoutId]    INT            NOT NULL,
    [Description] NVARCHAR (200) NOT NULL,
    [CoordX]      INT            NOT NULL,
    [CoordY]      INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Event]...';


GO
CREATE TABLE [dbo].[Event] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (120) NOT NULL,
    [Description] NVARCHAR (MAX) NOT NULL,
    [LayoutId]    INT            NOT NULL,
    [StartDateTime] DATETIME NOT NULL, 
    [EndDateTime] DATETIME NOT NULL, 
    [ImageUrl] nvarchar(MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

GO
PRINT N'Creating [dbo].[EventArea]...';


GO
CREATE TABLE [dbo].[EventArea] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [EventId]     INT            NOT NULL,
    [Description] NVARCHAR (200) NOT NULL,
    [CoordX]      INT            NOT NULL,
    [CoordY]      INT            NOT NULL,
    [Price]       DECIMAL (18)   NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EventSeat]...';


GO
CREATE TABLE [dbo].[EventSeat] (
    [Id]          INT IDENTITY (1, 1) NOT NULL,
    [EventAreaId] INT NOT NULL,
    [Row]         INT NOT NULL,
    [Number]      INT NOT NULL,
    [State]       INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Layout]...';


GO
CREATE TABLE [dbo].[Layout] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [VenueId]     INT            NOT NULL,
    [Description] NVARCHAR (120) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Seat]...';


GO
CREATE TABLE [dbo].[Seat] (
    [Id]     INT IDENTITY (1, 1) NOT NULL,
    [AreaId] INT NOT NULL,
    [Row]    INT NOT NULL,
    [Number] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Venue]...';


GO
CREATE TABLE [dbo].[Venue] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Description] NVARCHAR (120) NOT NULL,
    [Address]     NVARCHAR (200) NOT NULL,
    [Phone]       NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Layout_Area]...';


GO
ALTER TABLE [dbo].[Area]
    ADD CONSTRAINT [FK_Layout_Area] FOREIGN KEY ([LayoutId]) REFERENCES [dbo].[Layout] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Layout_Event]...';


GO
ALTER TABLE [dbo].[Event]
    ADD CONSTRAINT [FK_Layout_Event] FOREIGN KEY ([LayoutId]) REFERENCES [dbo].[Layout] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Event_EventArea]...';


GO
ALTER TABLE [dbo].[EventArea]
    ADD CONSTRAINT [FK_Event_EventArea] FOREIGN KEY ([EventId]) REFERENCES [dbo].[Event] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Area_EventSeat]...';


GO
ALTER TABLE [dbo].[EventSeat]
    ADD CONSTRAINT [FK_Area_EventSeat] FOREIGN KEY ([EventAreaId]) REFERENCES [dbo].[EventArea] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Venue_Layout]...';


GO
ALTER TABLE [dbo].[Layout]
    ADD CONSTRAINT [FK_Venue_Layout] FOREIGN KEY ([VenueId]) REFERENCES [dbo].[Venue] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Area_Seat]...';


GO
ALTER TABLE [dbo].[Seat]
    ADD CONSTRAINT [FK_Area_Seat] FOREIGN KEY ([AreaId]) REFERENCES [dbo].[Area] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[CreateEvent]...';


GO
CREATE PROCEDURE [dbo].[CreateEvent]
	@Name           varchar(120),
	@Description    varchar(max),
	@LayoutId       int,
    @StartDateTime  Datetime,
    @EndDateTime    Datetime,
    @ImageUrl       varchar(max)
AS
    INSERT INTO [dbo].[Event] (Name, Description, LayoutId, StartDateTime, EndDateTime, ImageUrl)
    VALUES (@Name, @Description, @LayoutId, @StartDateTime, @EndDateTime, @ImageUrl)

    SELECT SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[DeleteEvent]...';


GO
CREATE PROCEDURE [dbo].[DeleteEvent]
	@Id     int
AS
    DELETE FROM [dbo].[Event]
    WHERE Id = @Id
GO
PRINT N'Creating [dbo].[GetAllEvent]...';


GO
CREATE PROCEDURE [dbo].[GetAllEvent]
AS
    SELECT * FROM [dbo].[Event]
GO
PRINT N'Creating [dbo].[GetByIdEvent]...';


GO
CREATE PROCEDURE [dbo].[GetByIdEvent]
	@Id int
AS
	SELECT * FROM [dbo].[Event] WHERE Id = @Id
GO
PRINT N'Creating [dbo].[UpdateEvent]...';


GO
CREATE PROCEDURE [dbo].[UpdateEvent]
	@Id				int,
	@Name           varchar(120),
	@Description    varchar(max),
	@LayoutId       int,
	@StartDateTime	DateTime,
	@EndDateTime	DateTime,
	@ImageUrl		varchar(max)
AS
    UPDATE [dbo].[Event]
	SET Name = @Name, Description = @Description, LayoutId = @LayoutId, StartDateTime = @StartDateTime, EndDateTime = @EndDateTime, ImageUrl = @ImageUrl
	WHERE Id = @Id
	SELECT * FROM [dbo].[Event] WHERE Id = @Id
GO
--- Venue
insert into dbo.Venue
values 
('Luzhniki Stadium', 'st. Luzhniki, 24, Moscow, Russia, 119048', '+7 495 780-08-08'),
('Gomel Regional Drama Theater', 'pl. Lenin 1, Gomel 246050', '+375232757763'),
('The circus', 'pl. Lenin 1, Brest 246050', '+375442757763')

--- Layout
insert into dbo.Layout
values 
(1, 'Layout for football games.'),
(1, 'Layout for concerts.'),
(2, 'Layout for comedy performances.'),
(2, 'Layout for detective performances.'),
(2, 'Layout to deleteTests.')

--- Area
insert into dbo.Area
values 
(1, 'First sector of first layout.', 1, 1),
(1, 'Second sector of first layout.', 1, 2),
(1, 'Third sector of first layout.', 1, 3),
(1, 'Fourth sector of first layout.', 1, 4),
(2, 'First sector of second layout.', 1, 1),
(2, 'Third sector of second layout.', 1, 3),
(2, 'Fourth sector of second layout.', 1, 4),
(2, 'Fifth sector of second layout.', 1, 5),
(3, 'Parterre of first layout.', 1, 1),
(3, 'Balcony of first layout.', 2, 1),
(4, 'Parterre of second layout.', 2, 1),
(4, 'Area to test layout.', 2, 2)

--- Seat
insert into dbo.Seat
values 
(1, 1, 1), (1, 1, 2), (1, 1, 3),
(1, 2, 1), (1, 2, 2), (1, 2, 3),
(2, 1, 1), (2, 1, 2), (2, 1, 3),
(2, 2, 1), (2, 2, 2), (2, 2, 3),
(3, 1, 1), (3, 1, 2), (3, 1, 3),
(3, 2, 1), (3, 2, 2), (3, 2, 3),
(4, 1, 1), (4, 1, 2), (4, 1, 3),
(4, 2, 1), (4, 2, 2), (4, 2, 3),
(5, 1, 1), (5, 1, 2), (5, 1, 3),
(5, 2, 1), (5, 2, 2), (5, 2, 3),
(6, 1, 1), (6, 1, 2), (6, 1, 3),
(6, 2, 1), (6, 2, 2), (6, 2, 3),
(7, 1, 1), (7, 1, 2), (7, 1, 3),
(7, 2, 1), (7, 2, 2), (7, 2, 3),
(8, 1, 1), (8, 1, 2), (8, 1, 3),
(8, 2, 1), (8, 2, 2), (8, 2, 3),
(9, 1, 1), (9, 1, 2), (9, 1, 3),
(9, 2, 1), (9, 2, 2), (9, 2, 3),
(10, 1, 1), (10, 1, 2), (10, 1, 3),
(10, 2, 1), (10, 2, 2), (10, 2, 3),
(11, 1, 1), (11, 1, 2), (11, 1, 3),
(11, 2, 1), (11, 2, 2), (11, 2, 3),
(11, 3, 3)

----- Event
insert into dbo.Event
values
('Footbal match.', 'Netherlands - Russia', 1, N'2021-03-01 00:00:00', N'2021-03-01 01:00:00', 'Pics/FootballPicOne.PNG'),
('Football match.', 'Netherlands - Belarus', 1, N'2021-04-01 00:00:00', N'2021-04-01 02:00:00', 'Pics/FootballPicTwo.PNG'),
('Event to test.', 'Netherlands - Belarus', 1, N'2021-04-01 00:00:00', N'2021-04-01 03:00:00', 'Pics/FootballPicOne.PNG')

INSERT INTO [dbo].[EventArea] ([EventId], [Description], [CoordX], [CoordY], [Price]) 
VALUES
(1, N'First sector of first layout.', 1, 1, CAST(100 AS Decimal(18, 0))),
(1, N'Second sector of first layout.', 1, 2, CAST(100 AS Decimal(18, 0))),
(1, N'Third sector of first layout.', 1, 3, CAST(100 AS Decimal(18, 0))),
(1, N'Fourth sector of first layout.', 1, 4, CAST(100 AS Decimal(18, 0))),
(2, N'First sector of second layout.', 1, 1, CAST(100 AS Decimal(18, 0))),
(2, N'Third sector of second layout.', 1, 3, CAST(100 AS Decimal(18, 0))),
(2, N'Fourth sector of second layout.', 1, 4, CAST(100 AS Decimal(18, 0))),
(2, N'Fifth sector of second layout.', 1, 5, CAST(100 AS Decimal(18, 0)))

INSERT INTO [dbo].[EventSeat] ([EventAreaId], [Row], [Number], [State]) 
VALUES 
(1, 1, 1, 0),
(1, 1, 2, 0),
(1, 1, 3, 0),
(1, 2, 1, 0),
(1, 2, 2, 0),
(1, 2, 3, 0),
(2, 1, 1, 0),
(2, 1, 2, 0),
(2, 1, 3, 0),
(2, 2, 1, 0),
(2, 2, 2, 0),
(2, 2, 3, 0),
(3, 1, 1, 0),
(3, 1, 2, 0),
(3, 1, 3, 0),
(3, 2, 1, 0),
(3, 2, 2, 0),
(3, 2, 3, 0),
(4, 1, 1, 0),
(4, 1, 2, 0),
(4, 1, 3, 0),
(4, 2, 1, 0),
(4, 2, 2, 0),
(4, 2, 3, 0),
(5, 1, 1, 0),
(5, 1, 2, 0),
(5, 1, 3, 0),
(5, 2, 1, 0),
(5, 2, 2, 0),
(5, 2, 3, 0),
(6, 1, 1, 0),
(6, 1, 2, 0),
(6, 1, 3, 0),
(6, 2, 1, 0),
(6, 2, 2, 0),
(6, 2, 3, 0),
(7, 1, 1, 0),
(7, 1, 2, 0),
(7, 1, 3, 0),
(7, 2, 1, 0),
(7, 2, 2, 0),
(7, 2, 3, 0),
(8, 1, 1, 0),
(8, 1, 2, 0),
(8, 1, 3, 0),
(8, 2, 1, 0),
(8, 2, 2, 0),
(8, 2, 3, 0)
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'EventFlow.Database.Test', 'ON';
    END


GO
PRINT N'Update complete.';


GO
